# -*- coding: UTF-8 -*-

"""
Django settings for HelloWorld project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

## 设定工程根目录
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 产品密钥。创建项目时自动分配的产品密钥，可用原分配的产品密钥替换
SECRET_KEY = '*b!tt7oxsgl&em9!o=3!y)%-qj=y3jiz0)$xdfw0^j+_^3edul'

# SECURITY WARNING: don't run with debug turned on in production!
# 上线时DEBUG必须设为False
DEBUG = True

# 指定被访问主机。若元素为'*'，表示所有同一局域网内的主机均可被访问
ALLOWED_HOSTS = ['*']


# Application definition
# App加载
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)

# 中间件
MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'HelloWorld.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR+"/templates",],     # 公共模板
        'APP_DIRS': True,        # 多个App分别创建自己的模板路径，方法同静态文件
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HelloWorld.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

# 数据库。可配置多个，"default"为必须，但可以为空
# 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# 多数据库路由。写入自定义的路由Router类路径，为空则使用"default"数据库
DATABASE_ROUTERS = []

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
# 国际化
# 中文简体是'zh-hans'，Admin后台管理系统的页面语言随之改变
LANGUAGE_CODE = 'en-us'

# 本地时间
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True # 若使用了本地时间，必须设为False!!(默认值True)

# 邮箱服务配置
# EMAIL_HOST = 'xxx.com.cn'   # 发送者邮箱服务器
# EMAIL_PORT = 25
# EMAIL_HOST_USER = ''        # 发送者用户名（邮箱地址）
# EMAIL_HOST_PASSWORD = ''    # 发送者密码
# EMAIL_USE_SSL = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
# 静态文件的访问目录，自动指向"STATIC_ROOT"或"STATICFILES_DIRS"的目录值。
# 用于程序中，如{% static '静态文件指向目录下的子路径' %}
# 模板调用示例：{% static 'images/123.jpg' %}
STATIC_URL = '/static/'

# 这里的静态文件ROOT是生产环境根目录！仅用于生产！
# 当运行"python manage.py collectstatic"的时候，
# 会自动将STATICFILES_DIRS以及各APP中static的所有的文件
# 复制收集到STATIC_ROOT
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
